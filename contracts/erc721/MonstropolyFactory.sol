// SPDX-License-Identifier: Unlicensed
pragma solidity 0.8.9;

import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721Upgradeable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Pausable.sol";
import "../utils/AccessControlProxyPausable.sol";
import "../utils/UUPSUpgradeableByRole.sol";
import "@openzeppelin/contracts/utils/Context.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/Strings.sol";
import "../shared/IMonstropolyData.sol";
import "../shared/IMonstropolyDeployer.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - ability for holders to 
  (destroy) their tokens
 *  - a minter role that allows for token minting (creation)
 *  - a pauser role that allows to stop all token transfers
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter and pauser
 * roles, as well as the default admin role, which will let it grant both minter
 * and pauser roles to other accounts.
 */

contract MonstropolyFactory is
    AccessControlProxyPausable,
    UUPSUpgradeableByRole,
    ERC721Upgradeable
{
    struct Hero{
        address owner;
        string genetic;
        uint bornAt;
        uint256 index;
        bool exists;
    }

    struct Filter{
        bool byRarity;
        IMonstropolyData.Rare rarity;
        bool byAsset;
        IMonstropolyData.Asset asset;        
    }

    using Counters for Counters.Counter;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");   
    bytes32 public constant LOCKER_ROLE = keccak256("LOCKER_ROLE");    
    
    Counters.Counter private _tokenIdTracker;

    string private _baseTokenURI = "https://monstropoly.io/nfts/";
    mapping(address => mapping(uint256 => Hero)) _heroes;
    mapping(uint256 => Hero) _allHeroes;
    uint256[] _heroesId;    
    mapping(uint256 => Hero) lockedHeroes;
    mapping(bytes32 => bool) public gens;

    uint256 public createdAt;

    event Mint(address indexed from, address indexed to, uint256 indexed tokenId, string genetic);

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    function initialize() public /** TBD: initializer */ {    
        _init();
    }

    function _init() internal initializer {
        __ERC721_init("Heroes And Weapons", "HAW");            
        __AccessControlProxyPausable_init(msg.sender);
        createdAt = block.timestamp;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    function lockHero(uint256 tokenId) public{
        require(hasRole(LOCKER_ROLE, msg.sender), "You are not locker");
        lockedHeroes[tokenId] = heroeOfId(tokenId);
    }

    function unlockHero(uint256 tokenId) public {
        require(hasRole(LOCKER_ROLE, msg.sender), "You are not locker");
        delete lockedHeroes[tokenId];
    }
    function isLocked(uint256 tokenId) public view returns(bool) {
        return lockedHeroes[tokenId].exists == true;
    }
   
    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mint(address to, string calldata genes) public virtual whenNotPaused returns(uint){ 
        uint tokenId = _tokenIdTracker.current(); 
        require(hasRole(MINTER_ROLE, _msgSender()), "Invalid role");
        bytes32 _genId = _hashGen(genes);
        require(!gens[_genId], "MonstropolyFactory: gen already exists");
        gens[_genId] = true;
        // We cannot just use balanceOf to create the new tokenId because tokens
        // can be burned (destroyed), so we need a separate counter.
        _mint(to, tokenId);
        Hero memory hero = Hero(to, genes, block.timestamp, tokenId, true);
        // _heroes[to][tokenId] = hero;  
        _allHeroes[tokenId] = hero;
        _heroesId.push(tokenId);
        _tokenIdTracker.increment();

        emit Mint(address(0), to, tokenId, genes);

        return tokenId;
    }
    function heroeOfId(uint256 tokenId) public view returns(Hero memory) { 
        return _allHeroes[tokenId];
    }
    function heroesId() public view returns(uint256[] memory){
        return _heroesId;
    }

    function freeGen(string calldata gen) public view returns(bool) {
        bytes32 _genId = _hashGen(gen);
        return !gens[_genId];
    }

    function _hashGen(string calldata gen) public view returns(bytes32) {
        return IMonstropolyData(IMonstropolyDeployer(config).get(keccak256("DATA"))).hashGen(gen);
    }
    
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        string memory baseURI = _baseURI();
        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId)) : "";
    }
    function isApproved(address to, uint256 tokenId) public view returns (bool){
        return _isApprovedOrOwner(to, tokenId);
    }
    function transferFrom(
        address from,
        address to,
        uint256 tokenId
    ) public virtual override {
        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");
        transferTo(from, to, tokenId);
    }
    function transferTo(
        address from,
        address to,
        uint256 tokenId) internal{
        require(!lockedHeroes[tokenId].exists , "Hero can not be transferred because it is locked");
        _transferHero(tokenId, from, to);
        _safeTransfer(from, to, tokenId, "");
    }
    function _transferHero(uint256 tokenId,address from, address to) internal{
        Hero memory h        = _allHeroes[tokenId];        
        Hero memory newHero  = Hero(to, h.genetic, h.bornAt, h.index, h.exists);        
        _allHeroes[tokenId]  = newHero;
        // _heroes[to][tokenId] = newHero;  //TBD: why is it falling???? dont get it              
        // delete _heroes[from][tokenId];
    }
}
